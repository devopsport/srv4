name: Pipeline

on:
  push:
    branches:
      - master
      - feature/*

env:
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME }}
  ENV: ${{ github.ref == 'refs/heads/master' && 'prod' || 'staging' }}

jobs:
  Pipeline:
    name: Default
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        aws-region: '${{ secrets.AWS_DEFAULT_REGION }}'

    - name: Generate REPOSITORY_NAME
      run: echo "REPOSITORY_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d "/" -f2)" >> $GITHUB_ENV

    - name: Run Snyk to check Static Application Security Testing
      run: |
        cd app/
        curl https://static.snyk.io/cli/latest/snyk-linux -o /usr/local/bin/snyk
        chmod +x /usr/local/bin/snyk
        snyk auth "${{ secrets.SNYK_TOKEN }}"
        snyk code test --org="${{ secrets.SNYK_ORG }}" --project-name="${{ env.REPOSITORY_NAME }}" --severity-threshold=medium

    - name: Build Code
      run: ./.github/workflows/build.sh

    - name: Jest
      run: ./.github/workflows/test.sh

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      with:
        args: >
          -Dsonar.organization=team-devopsport
          -Dsonar.projectKey=devopsport_${{ env.REPOSITORY_NAME }}
          -Dsonar.qualitygate.wait=true
          -Dsonar.javascript.lcov.reportPaths=./app/coverage/lcov.info
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Run Snyk to check Open-Source vulnerabilities
      run: |
        cd app/
        snyk monitor --project-name="${{ env.REPOSITORY_NAME }}"
        snyk test --org="${{ secrets.SNYK_ORG }}" --project-name=${{ env.REPOSITORY_NAME }} --severity-threshold=medium

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.6

    - name: Init Terraform
      run: |
        sed -i 's/workspaceName/'${PROJECT_NAME}-${ENV}-${SERVICE_NAME}'/g' terraform/config.remote.tfbackend
        sed -i 's/TF_TOKEN/${{ secrets.TF_TOKEN }}/g' terraform/terraformrc
        mv terraform/terraformrc ${HOME}/.terraformrc
        cd terraform/
        terraform init -backend-config=config.remote.tfbackend
        curl -s --header "Authorization: Bearer ${{ secrets.TF_TOKEN }}" --header "Content-Type: application/vnd.api+json" --request PATCH --data '{"data":{"type":"workspaces","attributes":{"execution-mode":"local"}}}' "https://app.terraform.io/api/v2/organizations/banbifperu/workspaces/${PROJECT_NAME}-${ENV}-${SERVICE_NAME}"

    - name: Apply Terraform
      env:
        TF_VAR_aws_region: "${{ secrets.AWS_REGION }}"
      run: |
        export TF_VAR_project=${PROJECT_NAME}
        export TF_VAR_env=${ENV}
        export TF_VAR_service=${SERVICE_NAME}
        cd terraform/
        terraform apply -var-file="${ENV}.tfvars" -auto-approve

    - name: Publish
      run: aws s3 sync app/dist/ s3://${PROJECT_NAME}-${ENV}-${SERVICE_NAME}/ --delete --acl public-read

    - name: Release
      run: ./.github/workflows/release.sh
      env:
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}

    - name: Updating entry in GetPort
      uses: port-labs/port-github-action@v1
      with:
        clientId: ${{ secrets.PORT_CLIENT_ID }}
        clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
        baseUrl: https://api.getport.io
        operation: UPSERT
        identifier: ${{ env.REPOSITORY_NAME }}
        blueprint: service
        properties: |-
          {
            "url": "https://github.com/devopsport/${{ env.REPOSITORY_NAME }}",
            "coverage": 100,
            "security": "Passed"
          }
        relations: |
          {
            "project": "${{ vars.PROJECT_NAME }}",
            "baseline": "baseline-node"
          }
